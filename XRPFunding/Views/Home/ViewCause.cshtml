@model XRPFunding.Models.ViewCauseViewModel
@{
    ViewBag.Title = Model.Cause.Name;
}

<h2>@Model.Cause.Name</h2>

<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-6">
        <img src="@Model.Cause.UrlPhoto" alt="@Model.Cause.Name" style="height:250px;" class="img-rounded img-responsive" />
    </div>
    <div class="col-lg-6 col-md-6 col-sm-6 alert alert-success">
        Website URL: <a href="@Model.Cause.Website" target="_blank">@Model.Cause.Website</a> <br />
        Created At: @Model.Cause.CreatedAt.ToLocalTime() <br />
        Goal: @Model.Cause.FundGoal XRP<br />
        Balance: @(Model.Donations.Sum(x => x.Amount).ToString("N4")) XRP <br />
        Deadline: <b>@Model.Cause.Deadline.ToLocalTime()</b> <br />
        XRPL Address: @Model.Cause.XRPLAddress
    </div>
</div>
<h3>Description</h3>

<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12 text-justify">
        @Model.Cause.Description
    </div>
</div>

<h3>Donate</h3>

@if(Model.Cause.Deadline.ToLocalTime() < DateTime.UtcNow.ToLocalTime())
{
    <div class="col-lg-6 col-md-6 col-sm-6 alert alert-warning ">
        This cause has already completed its donation timeline.
    </div>
}
else
{
    @using(Html.BeginForm("Donate","Home",FormMethod.Post,new { id="form_donation" }))
    {
        <input type="hidden" value="@Model.Cause.Id" name="Form.Id" />
        <input type="hidden" name="Form.XRPLAddress" id="walletPublicKey" />
        <div class="row">
            <div class="col-lg-4 col-md-4 col-sm-4 text-justify">
                XRPL amount: <br />
                <input type="number" min="0" name="Form.Amount" required="required" id="amount" class="form-control" />
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 text-justify">
                Your wallet seed (we don't save this data): <br />
                <input type="text" name="secret" required="required" id="secret" class="form-control" />
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 text-justify">
                <br />
                <a href="#" onclick="donate();return false;" class="btn btn-success">Donate</a>
                <br />
                <span class="message_xrp" style="display:none;">Sending XRP</span>
            </div>
        </div> 

    }
}

<h3>Donations</h3>

<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12 text-justify">
        <table class="table">
            <thead>
                <tr>
                    <th>Amount</th>
                    <th>From</th>
                    <th>Created At</th>
                </tr>
            </thead>
            <tbody>
        @foreach(var donation in Model.Donations)
        {
            <tr>
                <td>@donation.Amount</td>
                <td>@donation.XRPLAddress</td>
                <td>@donation.CreatedAt.ToLocalTime()</td>
            </tr>

        }
        </tbody>
        </table>
    </div>
</div>
<br /><br />

@section Scripts
{
    
<script type="text/javascript">
    
    async function donate() {
        var amount = $('#amount').val();
        var seed = $('#secret').val();
        if(secret == '' || amount == '')
        {
            alert('You need to add an amount and your wallet seed to donate.');
            return false;
        }
        else {
            try {
                const wallet = xrpl.Wallet.fromSeed(seed);
                $('#walletPublicKey').val(wallet.classicAddress);
                const client = new xrpl.Client("wss://s.altnet.rippletest.net:51233")
                await client.connect();

                const prepared = await client.autofill({
                    "TransactionType": "Payment",
                    "Account": wallet.address,
                    "Amount": xrpl.xrpToDrops(amount),
                    "Destination": "@Model.Cause.XRPLAddress"
                  });
                const max_ledger = prepared.LastLedgerSequence
                console.log("Prepared transaction instructions:", prepared)
                console.log("Transaction cost:", xrpl.dropsToXrp(prepared.Fee), "XRP")
                console.log("Transaction expires after ledger:", max_ledger);
                $('.message_xrp').text('Sending XRP')
                $('.message_xrp').css("display","block");
                const signed = wallet.sign(prepared);
                console.log("Identifying hash:", signed.hash)
                console.log("Signed blob:", signed.tx_blob)
                const tx = await client.submitAndWait(signed.tx_blob);


                client.disconnect();
                $('.message_xrp').text('Your XRP was received for this cause.')
                $('#form_donation').submit();
            }
            catch (err) {
                $('.message_xrp').text('There is an error with your donation')
                $('.message_xrp').css("display","block");
            }
            finally {

            }
            
        }
     }
    
</script>
}